{"name":"Jillegal-compiler","tagline":"Java Generic and Multi Language Supported In Memory Compiler","body":"## **What is Jillegal-Compiler?**\r\n\r\n**Jillegal-Compiler** is a JMV based on the fly code compilating and class generation library.\r\n\r\n\r\n## **What features does Jillegal-Compiler have?**\r\n\r\n* Only the fly in memory **Java** code compilation and class generation.\r\n\r\n* Only the fly in memory **Groovy** code compilation and class generation.\r\n\r\n* Flexible design to allow for supporting new code types such as Ruby, Phyton, ....\r\n\r\n\r\n## **Install**\r\n\r\nIn your **pom.xml**, you must add repository and dependency for Jillegal-Compiler. \r\nYou can change **jillegal.compiler.version** to any existing **jillegal-compiler** library version.\r\n\r\n\t...\r\n\t<properties>\r\n\t\t...\r\n\t\t<jillegal.compiler.version>1.0.0-RELEASE</jillegal.compiler.version>\r\n\t\t...\r\n\t</properties>\r\n\t...\r\n\t<dependencies>\r\n\t\t...\r\n\t\t<dependency>\r\n\t\t\t<groupId>tr.com.serkanozal</groupId>\r\n\t\t\t<artifactId>jillegal-compiler</artifactId>\r\n\t\t\t<version>${jillegal.compiler.version}</version>\r\n\t\t</dependency>\r\n\t\t...\r\n\t</dependencies>\r\n\t...\r\n\t<repositories>\r\n\t\t...\r\n\t\t<repository>\r\n\t\t\t<id>serkanozal-maven-repository</id>\r\n\t\t\t<url>https://github.com/serkan-ozal/maven-repository/raw/master/</url>\r\n\t\t</repository>\r\n\t\t...\r\n\t</repositories>\r\n\t...\r\n\r\n\r\n## **Jillegal-Compiler with simple examples**\r\n\r\nYou can access all demo codes from here: [jillegal-compiler-demo](https://github.com/serkan-ozal/jillegal-compiler-demo)\r\n\r\n\r\n### _Java Class Compiler Example_\r\n\r\n    ClassCompilerFactory classCompilerFactory = new DefaultClassCompilerFactory();\r\n\t\t\r\n    String code = \r\n        \"package tr.com.serkanozal.jillegal.compiler;\"+ \"\\n\" +\r\n        \"\\n\" +\r\n        \"public class SampleJavaClass {\" + \"\\n\" +\r\n        \"\\n\" +\r\n        \"\\t\" + \"public String toString() {\" + \"\\n\" +\r\n        \"\\t\" + \"\\t\" + \"return \\\"I am SampleJavaClass\\\";\" + \"\\n\" +\r\n        \"\\t\" + \t\"}\" + \"\\n\" +\r\n        \"\\n\" +\r\n        \"}\";\r\n\r\n    Class<?> compiledClass = classCompilerFactory.getClassCompiler(DefaultCodeType.JAVA).compile(code);\r\n    System.out.println(\"In Memory Compiled Java Class: \" + compiledClass.getName());\r\n    Object obj = compiledClass.newInstance();\r\n    System.out.println(obj.toString());\r\n\r\n_Output:_\r\n\r\n    In Memory Compiled Java Class: tr.com.serkanozal.jillegal.compiler.SampleJavaClass\r\n    I am SampleGroovyClass\r\n\r\n\r\n\r\n### _Groovy Class Compiler Example_\r\n  \r\n    ClassCompilerFactory classCompilerFactory = new DefaultClassCompilerFactory();\r\n\t\t\r\n    String code = \r\n        \"package tr.com.serkanozal.jillegal.compiler;\"+ \"\\n\" +\r\n        \"\\n\" +\r\n        \"public class SampleGroovyClass {\" + \"\\n\" +\r\n        \"\\n\" +\r\n        \"\\t\" + \"public String toString() {\" + \"\\n\" +\r\n        \"\\t\" + \"\\t\" + \"def str = \\\"I am SampleGroovyClass\\\";\" + \"\\n\" +\r\n        \"\\t\" + \"\\t\" + \"return str;\" + \"\\n\" +\r\n        \"\\t\" + \t\"}\" + \"\\n\" +\r\n        \"\\n\" +\r\n        \"}\";\r\n\r\n    Class<?> compiledClass = classCompilerFactory.getClassCompiler(DefaultCodeType.GROOVY).compile(code);\r\n    System.out.println(\"In Memory Compiled Groovy Class: \" + compiledClass.getName());\r\n    Object obj = compiledClass.newInstance();\r\n    System.out.println(obj.toString());\r\n\r\n_Output:_\r\n\r\n    In Memory Compiled Groovy Class: tr.com.serkanozal.jillegal.compiler.SampleGroovyClass\r\n    I am SampleGroovyClass\r\n\r\n\r\n## **Roadmap**\r\n\r\n* **Ruby** support will be added\r\n* **Phyton** support will be added\r\n* **Scala** support will be added\r\n","google":"UA-40423353-1","note":"Don't delete this file! It's used internally to help with page regeneration."}